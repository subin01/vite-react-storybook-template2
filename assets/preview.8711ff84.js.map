{"version":3,"file":"preview.8711ff84.js","sources":["../../node_modules/@whitespace/storybook-addon-html/dist/esm/constants.js","../../node_modules/@whitespace/storybook-addon-html/dist/esm/withHTML.js","../../node_modules/@whitespace/storybook-addon-html/dist/esm/preset/preview.js"],"sourcesContent":["export var ADDON_ID = \"storybook/html\";\nexport var PANEL_ID = \"\".concat(ADDON_ID, \"/panel\");\nexport var PARAM_KEY = \"html\";\nexport var EVENTS = {\n  CODE_UPDATE: \"\".concat(ADDON_ID, \"/codeUpdate\")\n};","import { makeDecorator, useChannel } from \"@storybook/addons\";\nimport { EVENTS } from \"./constants\";\nexport var withHTML = makeDecorator({\n  name: \"withHTML\",\n  parameterName: \"html\",\n  skipIfNoParametersOrOptions: false,\n  wrapper: function wrapper(storyFn, context, _ref) {\n    var _ref$parameters = _ref.parameters,\n        parameters = _ref$parameters === void 0 ? {} : _ref$parameters;\n    var emit = useChannel({});\n    setTimeout(function () {\n      var rootSelector = parameters.root || \"#root\";\n      var root = document.querySelector(rootSelector);\n      var code = root ? root.innerHTML : \"\".concat(rootSelector, \" not found.\");\n      var removeEmptyComments = parameters.removeEmptyComments,\n          removeComments = parameters.removeComments;\n\n      if (removeEmptyComments) {\n        code = code.replace(/<!--\\s*-->/g, \"\");\n      }\n\n      if (removeComments === true) {\n        code = code.replace(/<!--.*?-->/g, \"\");\n      } else if (removeComments instanceof RegExp) {\n        code = code.replace(/<!--(.*?)-->/g, function (match, p1) {\n          return removeComments.test(p1) ? \"\" : match;\n        });\n      }\n\n      emit(EVENTS.CODE_UPDATE, {\n        code: code,\n        options: parameters\n      });\n    }, 0);\n    return storyFn(context);\n  }\n});\n\nif (module && module.hot && module.hot.decline) {\n  module.hot.decline();\n}","/**\n * A decorator is a way to wrap a story in extra “rendering” functionality. Many addons define decorators\n * in order to augment stories:\n * - with extra rendering\n * - gather details about how a story is rendered\n *\n * When writing stories, decorators are typically used to wrap stories with extra markup or context mocking.\n *\n * https://storybook.js.org/docs/react/writing-stories/decorators#gatsby-focus-wrapper\n */\nimport { withHTML } from \"../withHTML\";\nexport var decorators = [withHTML];"],"names":["ADDON_ID","EVENTS","withHTML","makeDecorator","__name","storyFn","context","_ref","_ref$parameters","parameters","emit","useChannel","rootSelector","root","code","removeEmptyComments","removeComments","match","p1","decorators"],"mappings":"yKAAO,IAAIA,EAAW,iBAGXC,EAAS,CAClB,YAAa,GAAG,OAAOD,EAAU,aAAa,CAChD,ECHWE,EAAWC,EAAc,CAClC,KAAM,WACN,cAAe,OACf,4BAA6B,GAC7B,QAASC,EAAA,SAAiBC,EAASC,EAASC,EAAM,CAChD,IAAIC,EAAkBD,EAAK,WACvBE,EAAaD,IAAoB,OAAS,CAAA,EAAKA,EAC/CE,EAAOC,EAAW,CAAA,CAAE,EACxB,kBAAW,UAAY,CACrB,IAAIC,EAAeH,EAAW,MAAQ,QAClCI,EAAO,SAAS,cAAcD,CAAY,EAC1CE,EAAOD,EAAOA,EAAK,UAAY,GAAG,OAAOD,EAAc,aAAa,EACpEG,EAAsBN,EAAW,oBACjCO,EAAiBP,EAAW,eAE5BM,IACFD,EAAOA,EAAK,QAAQ,cAAe,EAAE,GAGnCE,IAAmB,GACrBF,EAAOA,EAAK,QAAQ,cAAe,EAAE,EAC5BE,aAA0B,SACnCF,EAAOA,EAAK,QAAQ,gBAAiB,SAAUG,EAAOC,EAAI,CACxD,OAAOF,EAAe,KAAKE,CAAE,EAAI,GAAKD,CAChD,CAAS,GAGHP,EAAKT,EAAO,YAAa,CACvB,KAAMa,EACN,QAASL,CACjB,CAAO,CACF,EAAE,CAAC,EACGJ,EAAQC,CAAO,CACvB,EA7BQ,UA8BX,CAAC,EAEG,QAAU,OAAO,KAAO,OAAO,IAAI,SACrC,OAAO,IAAI,UC5BH,IAACa,EAAa,CAACjB,CAAQ"}